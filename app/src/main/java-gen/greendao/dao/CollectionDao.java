package greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import greendao.bean.Collection;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION".
*/
@SuppressWarnings("all")
public class CollectionDao extends AbstractDao<Collection, Long> {

    public static final String TABLENAME = "COLLECTION";

    /**
     * Properties of entity Collection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoryId = new Property(1, String.class, "storyId", false, "STORY_ID");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Collection> user_CollectionsQuery;

    public CollectionDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STORY_ID\" TEXT NOT NULL ," + // 1: storyId
                "\"IMAGE\" TEXT," + // 2: image
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"TYPE\" INTEGER," + // 4: type
                "\"USER_ID\" TEXT NOT NULL );"); // 5: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Collection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStoryId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
        stmt.bindString(4, entity.getTitle());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
        stmt.bindString(6, entity.getUserId());
    }

    @Override
    protected void attachEntity(Collection entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Collection readEntity(Cursor cursor, int offset) {
        Collection entity = new Collection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // storyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.getString(offset + 5) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Collection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoryId(cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserId(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Collection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Collection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "collections" to-many relationship of User. */
    public List<Collection> _queryUser_Collections(String userId) {
        synchronized (this) {
            if (user_CollectionsQuery == null) {
                QueryBuilder<Collection> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_CollectionsQuery = queryBuilder.build();
            }
        }
        Query<Collection> query = user_CollectionsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
