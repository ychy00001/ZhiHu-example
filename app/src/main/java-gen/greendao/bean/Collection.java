package greendao.bean;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;
import greendao.dao.CollectionDao;
import greendao.dao.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "COLLECTION".
 */
@SuppressWarnings("all")
public class Collection {

    private Long id;
    /** Not-null value. */
    private String storyId;
    private String image;
    /** Not-null value. */
    private String title;
    private Integer type;
    /** Not-null value. */
    private String userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CollectionDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Collection() {
    }

    public Collection(Long id) {
        this.id = id;
    }

    public Collection(Long id, String storyId, String image, String title, Integer type, String userId) {
        this.id = id;
        this.storyId = storyId;
        this.image = image;
        this.title = title;
        this.type = type;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCollectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getStoryId() {
        return storyId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStoryId(String storyId) {
        this.storyId = storyId;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    /** Not-null value. */
    public String getUserId() {
        return userId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
